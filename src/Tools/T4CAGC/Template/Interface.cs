// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4CAGC.Template
{
    using System.Collections.Generic;
    using T4CAGC.Model;
    using Microservice.Library.Extension;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Interface : InterfaceBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\n");
            this.Write(@"/*\__________________________________________________________________________________________________
|*												提示											 __≣|
|* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| 
|*      此代码由T4模板自动生成																	|
|*		版本:");
            
            #line 6 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Version.PadRight(83, ' ')));
            
            #line default
            #line hidden
            this.Write("|__\r\n|*\t\t日期:");
            
            #line 7 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss").PadRight(86, ' ')));
            
            #line default
            #line hidden
            this.Write("≣|\r\n|*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tby  LCTR\t\t   ≣|\r\n|* ___________________________________" +
                    "_____________________________________________________________≣|\r\n\\*/\r\n\r\n\r\n\r\n");
            
            #line 14 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"

	foreach (var @namespace in NameSpaces?.OrderBy(o => o))
	{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 18 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 19 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"

	}

            
            #line default
            #line hidden
            this.Write("\r\nnamespace Business.Interface.");
            
            #line 7 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ModuleName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// ");
            
            #line 10 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Remark));
            
            #line default
            #line hidden
            this.Write("接口类\r\n    /// </summary>\r\n    public interface I");
            
            #line 12 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business\r\n    {\r\n        #region 基础功能\r\n");
            
            #line 15 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    foreach (var field in Options.Table.Fields)
    {
        if(field.Consts.Any_Ex())
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取所有");
            
            #line 23 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        Dictionary<str" +
                    "ing, string> GetAll");
            
            #line 26 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 27 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        }
        
        if(field.Enums.Any_Ex())
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取所有");
            
            #line 35 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));
            
            #line default
            #line hidden
            this.Write("字典\r\n        /// </summary>\r\n        /// <returns>{名称: 值}</returns>\r\n        Dicti" +
                    "onary<string, string> GetAll");
            
            #line 38 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 39 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        }
    }

    if(Functions.ContainsKey(Function.List))
    {
        if(Options.Table.Tree)
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取树状列表数据\r\n        /// </summary>\r\n        //" +
                    "/ <param name=\"pagination\">分页设置</param>\r\n        /// <returns></returns>\r\n      " +
                    "  List<");
            
            #line 54 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.List]));
            
            #line default
            #line hidden
            this.Write("> GetTreeList(TreePaginationDTO pagination);\r\n");
            
            #line 55 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取列表数据\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"pagination\">分页设置</param>\r\n        /// <returns></returns>\r\n        " +
                    "List<");
            
            #line 66 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.List]));
            
            #line default
            #line hidden
            this.Write("> GetList(PaginationDTO pagination);\r\n");
            
            #line 67 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        }
    }

    if(Functions.ContainsKey(Function.DropdownList))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 获取下拉选择列表数据
        /// </summary>
        /// <param name=""condition"">关键词(多个用空格分隔)</param>
        /// <param name=""pagination"">分页设置</param>
        /// <returns></returns>
        List<SelectOption> GetDropdownList(string condition, PaginationDTO pagination);
");
            
            #line 82 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

    if(Functions.ContainsKey(Function.Detail))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取详情数据\r\n        /// </summary>\r\n");
            
            #line 92 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        ");
            
            #line 94 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Detail]));
            
            #line default
            #line hidden
            this.Write(" GetDetail(");
            
            #line 94 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 95 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

    if(Functions.ContainsKey(Function.Create))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 新增\r\n        /// </summary>\r\n        /// <par" +
                    "am name=\"data\">数据</param>\r\n        /// <returns></returns>\r\n        void Create(" +
                    "");
            
            #line 107 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Create]));
            
            #line default
            #line hidden
            this.Write(" data);\r\n");
            
            #line 108 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

    if(Functions.ContainsKey(Function.Edit))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取编辑数据\r\n        /// </summary>\r\n");
            
            #line 118 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        ");
            
            #line 120 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Edit]));
            
            #line default
            #line hidden
            this.Write(" GetEdit(");
            
            #line 120 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// 编辑\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"data\">数据</param>\r\n        /// <returns></returns>\r\n        void Edi" +
                    "t(");
            
            #line 127 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Edit]));
            
            #line default
            #line hidden
            this.Write(" data);\r\n");
            
            #line 128 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

    if(Functions.ContainsKey(Function.Delete))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 删除\r\n        /// </summary>\r\n");
            
            #line 138 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        WritePrimaryListParamsRemark();

            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        void Delete(List<string> keys);\r\n");
            
            #line 143 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n\r\n        #region 拓展功能\r\n");
            
            #line 150 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    if(Functions.ContainsKey(Function.Enable))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 启用/禁用\r\n        /// </summary>\r\n");
            
            #line 158 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"enable\">设置状态</param>\r\n        /// <returns></returns>\r\n " +
                    "       void Enable(");
            
            #line 161 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(", bool enable);\r\n");
            
            #line 162 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }
    
    if(Functions.ContainsKey(Function.Sort))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 普通排序
        /// </summary>
        /// <param name=""data"">数据</param>
        /// <returns></returns>
        void Sort(Sort data);

        /// <summary>
        /// 拖动排序
        /// </summary>
        /// <param name=""data"">数据</param>
        /// <returns></returns>
        void DragSort(");
            
            #line 181 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Tree ? "TreeDragSort" : "DragSort"));
            
            #line default
            #line hidden
            this.Write(" data);\r\n");
            
            #line 182 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }
    
    if(Functions.ContainsKey(Function.Import))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 下载导入模板
        /// </summary>
        /// <param name=""version"">
        /// <para>指定Excel文件版本</para>
        /// <para><see cref=""ExcelVersion.xls""/>: 2003版本</para>
        /// <para>(默认)<see cref=""ExcelVersion.xlsx""/>: 2007及以上版本</para>
        /// </param>
        /// <param name=""autogenerateTemplate"">
        /// <para>指明要使用的模板类型</para>
        /// <para>(默认)true: 自动生成模板</para>
        /// <para>false: 使用预制模板</para>
        /// </param>
        /// <returns></returns>
        Task DownloadTemplate(string version = ExcelVersion.xlsx, bool autogenerateTemplate = true);

        /// <summary>
        /// 数据导入
        /// </summary>
        /// <param name=""file"">Execl文件</param>
        /// <param name=""autogenerateTemplate"">
        /// <para>指明所使用的模板类型</para>
        /// <para>(默认)true: 自动生成的模板</para>
        /// <para>false: 预制模板</para>
        /// </param>
        /// <returns></returns>
        ImportResult Import(IFormFile file, bool autogenerateTemplate = true);
");
            
            #line 216 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }
    
    if(Functions.ContainsKey(Function.Export))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name=""version"">
        /// Excel文件版本,
        /// <see cref=""ExcelVersion.xls""/>2003,
        /// (默认)<see cref=""ExcelVersion.xlsx""/>2007
        /// </param>
        /// <param name=""paginationJson"">分页参数Json字符串</param>
        /// <returns></returns>
        void Export(string version = ExcelVersion.xlsx, string paginationJson = null);
");
            
            #line 234 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 242 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    /// <summary>
    /// 主键参数注释
    /// </summary>
    private void WritePrimaryParamsRemark()
    {
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 250 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write("        /// <param name=\"");

        
        #line default
        #line hidden
        
        #line 251 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 251 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write("\">");

        
        #line default
        #line hidden
        
        #line 251 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));

        
        #line default
        #line hidden
        
        #line 251 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write("</param>\r\n");

        
        #line default
        #line hidden
        
        #line 252 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        }
    }

    /// <summary>
    /// 主键参数
    /// </summary>
    private void WritePrimaryParams()
    {
        var i = 0;
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 264 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? ", " : ""));

        
        #line default
        #line hidden
        
        #line 264 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.CsTypeKeyword));

        
        #line default
        #line hidden
        
        #line 264 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 264 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 264 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

            i++;
        }
    }

    /// <summary>
    /// 主键集合参数注释
    /// </summary>
    private void WritePrimaryListParamsRemark()
    {

        
        #line default
        #line hidden
        
        #line 274 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write("        /// <param name=\"keys\">[");

        
        #line default
        #line hidden
        
        #line 275 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

        var i = 0;
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 279 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? " + " : ""));

        
        #line default
        #line hidden
        
        #line 279 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));

        
        #line default
        #line hidden
        
        #line 279 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

            i++;
        }

        
        #line default
        #line hidden
        
        #line 282 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"
this.Write("]</param>\r\n");

        
        #line default
        #line hidden
        
        #line 283 "D:\源码\Github\社区框架\Microservice\src\Tools\T4CAGC\Template\Interface.tt"

    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class InterfaceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

<#@ template language="C#" #>  
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="T4CAGC.Model" #>
<#@ import namespace="Microservice.Library.Extension" #>
<#@ include file=".\Reuseable\BaseHead.ttinclude" #>

namespace Business.Interface.<#=Options.Table.ModuleName#>
{
    /// <summary>
    /// <#=Options.Table.Remark#>接口类
    /// </summary>
    public interface I<#=Options.Table.ReducedName#>Business
    {
        #region 基础功能
<#
    foreach (var field in Options.Table.Fields)
    {
        if(field.Consts.Any_Ex())
        {
#>

        /// <summary>
        /// 获取所有<#=field.Remark#>
        /// </summary>
        /// <returns></returns>
        Dictionary<string, string> GetAll<#=field.Name#>();
<#
        }
        
        if(field.Enums.Any_Ex())
        {
#>

        /// <summary>
        /// 获取所有<#=field.Remark#>字典
        /// </summary>
        /// <returns>{名称: 值}</returns>
        Dictionary<string, string> GetAll<#=field.Name#>();
<#
        }
    }

    if(Functions.ContainsKey(Function.List))
    {
        if(Options.Table.Tree)
        {
#>

        /// <summary>
        /// 获取树状列表数据
        /// </summary>
        /// <param name="pagination">分页设置</param>
        /// <returns></returns>
        List<<#=Functions[Function.List]#>> GetTreeList(TreePaginationDTO pagination);
<#
        }
        else
        {
#>

        /// <summary>
        /// 获取列表数据
        /// </summary>
        /// <param name="pagination">分页设置</param>
        /// <returns></returns>
        List<<#=Functions[Function.List]#>> GetList(PaginationDTO pagination);
<#
        }
    }

    if(Functions.ContainsKey(Function.DropdownList))
    {
#>

        /// <summary>
        /// 获取下拉选择列表数据
        /// </summary>
        /// <param name="condition">关键词(多个用空格分隔)</param>
        /// <param name="pagination">分页设置</param>
        /// <returns></returns>
        List<SelectOption> GetDropdownList(string condition, PaginationDTO pagination);
<#
    }

    if(Functions.ContainsKey(Function.Detail))
    {
#>

        /// <summary>
        /// 获取详情数据
        /// </summary>
<#WritePrimaryParamsRemark();#>
        /// <returns></returns>
        <#=Functions[Function.Detail]#> GetDetail(<#WritePrimaryParams();#>);
<#
    }

    if(Functions.ContainsKey(Function.Create))
    {
#>

        /// <summary>
        /// 新增
        /// </summary>
        /// <param name="data">数据</param>
        /// <returns></returns>
        void Create(<#=Functions[Function.Create]#> data);
<#
    }

    if(Functions.ContainsKey(Function.Edit))
    {
#>

        /// <summary>
        /// 获取编辑数据
        /// </summary>
<#WritePrimaryParamsRemark();#>
        /// <returns></returns>
        <#=Functions[Function.Edit]#> GetEdit(<#WritePrimaryParams();#>);

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="data">数据</param>
        /// <returns></returns>
        void Edit(<#=Functions[Function.Edit]#> data);
<#
    }

    if(Functions.ContainsKey(Function.Delete))
    {
#>

        /// <summary>
        /// 删除
        /// </summary>
<#
        WritePrimaryListParamsRemark();
#>
        /// <returns></returns>
        void Delete(List<string> keys);
<#
    }
#>

        #endregion

        #region 拓展功能
<#
    if(Functions.ContainsKey(Function.Enable))
    {
#>

        /// <summary>
        /// 启用/禁用
        /// </summary>
<#WritePrimaryParamsRemark();#>
        /// <param name="enable">设置状态</param>
        /// <returns></returns>
        void Enable(<#WritePrimaryParams();#>, bool enable);
<#
    }
    
    if(Functions.ContainsKey(Function.Sort))
    {
#>

        /// <summary>
        /// 普通排序
        /// </summary>
        /// <param name="data">数据</param>
        /// <returns></returns>
        void Sort(Sort data);

        /// <summary>
        /// 拖动排序
        /// </summary>
        /// <param name="data">数据</param>
        /// <returns></returns>
        void DragSort(<#=Options.Table.Tree ? "TreeDragSort" : "DragSort"#> data);
<#
    }
    
    if(Functions.ContainsKey(Function.Import))
    {
#>

        /// <summary>
        /// 下载导入模板
        /// </summary>
        /// <param name="version">
        /// <para>指定Excel文件版本</para>
        /// <para><see cref="ExcelVersion.xls"/>: 2003版本</para>
        /// <para>(默认)<see cref="ExcelVersion.xlsx"/>: 2007及以上版本</para>
        /// </param>
        /// <param name="autogenerateTemplate">
        /// <para>指明要使用的模板类型</para>
        /// <para>(默认)true: 自动生成模板</para>
        /// <para>false: 使用预制模板</para>
        /// </param>
        /// <returns></returns>
        Task DownloadTemplate(string version = ExcelVersion.xlsx, bool autogenerateTemplate = true);

        /// <summary>
        /// 数据导入
        /// </summary>
        /// <param name="file">Execl文件</param>
        /// <param name="autogenerateTemplate">
        /// <para>指明所使用的模板类型</para>
        /// <para>(默认)true: 自动生成的模板</para>
        /// <para>false: 预制模板</para>
        /// </param>
        /// <returns></returns>
        ImportResult Import(IFormFile file, bool autogenerateTemplate = true);
<#
    }
    
    if(Functions.ContainsKey(Function.Export))
    {
#>

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="version">
        /// Excel文件版本,
        /// <see cref="ExcelVersion.xls"/>2003,
        /// (默认)<see cref="ExcelVersion.xlsx"/>2007
        /// </param>
        /// <param name="paginationJson">分页参数Json字符串</param>
        /// <returns></returns>
        void Export(string version = ExcelVersion.xlsx, string paginationJson = null);
<#
    }
#>

        #endregion
    }
}

<#+
    /// <summary>
    /// 主键参数注释
    /// </summary>
    private void WritePrimaryParamsRemark()
    {
        foreach (var field in PrimaryKeys)
        {
#>
        /// <param name="<#=field.Name.ToLower()#>"><#=field.Remark#></param>
<#+
        }
    }

    /// <summary>
    /// 主键参数
    /// </summary>
    private void WritePrimaryParams()
    {
        var i = 0;
        foreach (var field in PrimaryKeys)
        {
#><#=i > 0 ? ", " : ""#><#=field.CsTypeKeyword#> <#=field.Name.ToLower()#><#+
            i++;
        }
    }

    /// <summary>
    /// 主键集合参数注释
    /// </summary>
    private void WritePrimaryListParamsRemark()
    {
#>
        /// <param name="keys">[<#+
        var i = 0;
        foreach (var field in PrimaryKeys)
        {
#><#=i > 0 ? " + " : ""#><#=field.Remark#><#+
            i++;
        }
#>]</param>
<#+
    }
#>
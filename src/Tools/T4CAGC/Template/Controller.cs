// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4CAGC.Template
{
    using System.Collections.Generic;
    using T4CAGC.Model;
    using T4CAGC.Extension;
    using Microservice.Library.Extension;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Controller : ControllerBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\n");
            this.Write(@"/*\__________________________________________________________________________________________________
|*												提示											 __≣|
|* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| 
|*      此代码由T4模板自动生成																	|
|*		版本:");
            
            #line 6 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Version.PadRight(83, ' ')));
            
            #line default
            #line hidden
            this.Write("|__\r\n|*\t\t日期:");
            
            #line 7 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss").PadRight(86, ' ')));
            
            #line default
            #line hidden
            this.Write("≣|\r\n|*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tby  LCTR\t\t   ≣|\r\n|* ___________________________________" +
                    "_____________________________________________________________≣|\r\n\\*/\r\n\r\n\r\n\r\n");
            
            #line 14 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"

	foreach (var @namespace in NameSpaces?.OrderBy(o => o))
	{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 18 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 19 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\.\Reuseable\BaseHead.ttinclude"

	}

            
            #line default
            #line hidden
            this.Write("\r\nnamespace Api.Controllers.");
            
            #line 8 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ModuleName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// ");
            
            #line 11 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Remark));
            
            #line default
            #line hidden
            this.Write("接口\r\n    /// </summary>\r\n    [ApiController]\r\n    [ApiVersion(\"1.0\")]\r\n    [ApiExp" +
                    "lorerSettings()]\r\n    [Route(\"/");
            
            #line 16 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Name.GetAbbreviation(30).ToLower()));
            
            #line default
            #line hidden
            this.Write("\")]\r\n    [SampleAuthorize(nameof(ApiAuthorizeRequirement))]\r\n    [SwaggerTag(\"");
            
            #line 18 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Remark));
            
            #line default
            #line hidden
            this.Write("接口\")]\r\n    public class ");
            
            #line 19 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Controller : BaseApiController\r\n    {\r\n        #region DI\r\n\r\n        /// <summary" +
                    ">\r\n        /// \r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 26 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName.ToLower()));
            
            #line default
            #line hidden
            this.Write("Business\"></param>\r\n        public ");
            
            #line 27 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Controller(I");
            
            #line 27 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business ");
            
            #line 27 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName.ToLower()));
            
            #line default
            #line hidden
            this.Write("Business)\r\n        {\r\n            ");
            
            #line 29 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business = ");
            
            #line 29 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName.ToLower()));
            
            #line default
            #line hidden
            this.Write("Business;\r\n        }\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 33 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Remark));
            
            #line default
            #line hidden
            this.Write("接口类\r\n        /// </summary>\r\n        readonly I");
            
            #line 35 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business ");
            
            #line 35 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business;\r\n\r\n        #endregion\r\n\r\n        #region 基础功能\r\n\r\n");
            
            #line 41 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    foreach (var field in Options.Table.Fields)
    {
        if(field.Consts.Any_Ex())
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取所有");
            
            #line 49 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        [HttpPost(\"all" +
                    "-");
            
            #line 52 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write("\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"");
            
            #line 53 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));
            
            #line default
            #line hidden
            this.Write("\", typeof(List<string>))]\r\n        public async Task<object> GetAll");
            
            #line 54 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            return await Task.FromResult(Success(");
            
            #line 56 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetAll");
            
            #line 56 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("()));\r\n        }\r\n");
            
            #line 58 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        }
        
        if(field.Enums.Any_Ex())
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取所有");
            
            #line 66 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        [HttpPost(\"all" +
                    "-");
            
            #line 69 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write("\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"{名称: 值}\", typeof(Dictionar" +
                    "y<string, string>))]\r\n        public async Task<object> GetAll");
            
            #line 71 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            return await Task.FromResult(Success(");
            
            #line 73 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetAll");
            
            #line 73 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("()));\r\n        }\r\n");
            
            #line 75 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        }
    }

    if(Functions.ContainsKey(Function.List))
    {
        if(Options.Table.Tree)
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取树状列表数据\r\n        /// </summary>\r\n        //" +
                    "/ <param name=\"pagination\">分页设置</param>\r\n        /// <returns></returns>\r\n      " +
                    "  [HttpPost(\"tree-list\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"树状列" +
                    "表数据\", typeof(");
            
            #line 91 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.List]));
            
            #line default
            #line hidden
            this.Write("))]\r\n        public async Task<object> GetTreeList([FromBody] TreePaginationDTO p" +
                    "agination)\r\n        {\r\n            return await Task.FromResult(OpenApiJsonConte" +
                    "nt(ResponseDataFactory.Success(");
            
            #line 94 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetTreeList(pagination))));\r\n        }\r\n");
            
            #line 96 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取列表数据\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"pagination\">分页设置</param>\r\n        /// <returns></returns>\r\n        " +
                    "[HttpPost(\"list\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"列表数据\", typ" +
                    "eof(");
            
            #line 108 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.List]));
            
            #line default
            #line hidden
            this.Write("))]\r\n        public async Task<object> GetList([FromBody] PaginationDTO paginatio" +
                    "n)\r\n        {\r\n            return await Task.FromResult(OpenApiJsonContent(");
            
            #line 111 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetList(pagination), pagination));\r\n        }\r\n");
            
            #line 113 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
        
        }
    }

    if(Functions.ContainsKey(Function.DropdownList))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 获取下拉选择列表数据
        /// </summary>
        /// <param name=""condition"">关键词(多个用空格分隔)</param>
        /// <param name=""pagination"">分页设置</param>
        /// <returns></returns>
        [HttpPost(""dropdown-list"")]
        [SwaggerResponse((int)HttpStatusCode.OK, ""下拉选择列表数据"", typeof(SelectOption))]
        public async Task<object> GetDropdownList(string condition, PaginationDTO pagination)
        {
            return await Task.FromResult(OpenApiJsonContent(");
            
            #line 131 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.DropdownList(condition, pagination), pagination));\r\n        }\r\n");
            
            #line 133 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }


    if(Functions.ContainsKey(Function.Detail))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 详情数据数据\r\n        /// </summary>\r\n");
            
            #line 144 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        [HttpPost(\"detail-data");
            
            #line 146 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryRouteParams();
            
            #line default
            #line hidden
            this.Write("\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"详情数据\", typeof(");
            
            #line 147 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Detail]));
            
            #line default
            #line hidden
            this.Write("))]\r\n        public async Task<object> GetDetail(");
            
            #line 148 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            return await Task.FromResult(OpenApiJsonContent(Respons" +
                    "eDataFactory.Success(");
            
            #line 150 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetDetail(");
            
            #line 150 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryMethodParams();
            
            #line default
            #line hidden
            this.Write("))));\r\n        }\r\n");
            
            #line 152 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

    if(Functions.ContainsKey(Function.Create))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 新增\r\n        /// </summary>\r\n        /// <par" +
                    "am name=\"data\">表单数据</param>\r\n        /// <returns></returns>\r\n        [HttpPost(" +
                    "\"create\")]\r\n        public async Task<object> Create([FromBody] ");
            
            #line 165 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Create]));
            
            #line default
            #line hidden
            this.Write(" data)\r\n        {\r\n            ");
            
            #line 167 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Create(data);\r\n            return await Task.FromResult(Success(\"添加成功.\")" +
                    ");\r\n        }\r\n");
            
            #line 170 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

    if(Functions.ContainsKey(Function.Edit))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 获取编辑数据\r\n        /// </summary>\r\n");
            
            #line 180 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        [HttpPost(\"edit-data");
            
            #line 182 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryRouteParams();
            
            #line default
            #line hidden
            this.Write("\")]\r\n        [SwaggerResponse((int)HttpStatusCode.OK, \"编辑数据\", typeof(");
            
            #line 183 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Edit]));
            
            #line default
            #line hidden
            this.Write("))]\r\n        public async Task<object> GetEdit(");
            
            #line 184 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            return await Task.FromResult(OpenApiJsonContent(Respons" +
                    "eDataFactory.Success(");
            
            #line 186 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.GetEdit(");
            
            #line 186 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryMethodParams();
            
            #line default
            #line hidden
            this.Write("))));\r\n        }\r\n\r\n        /// <summary>\r\n        /// 编辑数据\r\n        /// </summar" +
                    "y>\r\n        /// <param name=\"data\">表单数据</param>\r\n        /// <returns></returns>" +
                    "\r\n        [HttpPost(\"edit\")]\r\n        public async Task<object> Edit([FromBody] " +
                    "");
            
            #line 195 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Functions[Function.Edit]));
            
            #line default
            #line hidden
            this.Write(" data)\r\n        {\r\n            ");
            
            #line 197 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Edit(data);\r\n            return await Task.FromResult(Success());\r\n     " +
                    "   }\r\n");
            
            #line 200 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

    if(Functions.ContainsKey(Function.Delete))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 删除数据\r\n        /// </summary>\r\n");
            
            #line 210 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        WritePrimaryListParamsRemark();

            
            #line default
            #line hidden
            this.Write("        /// <returns></returns>\r\n        [HttpPost(\"delete\")]\r\n        public asy" +
                    "nc Task<object> Delete(IEnumerable<string> keys)\r\n        {\r\n            ");
            
            #line 217 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Delete(keys?.ToList());\r\n            return await Task.FromResult(Succes" +
                    "s());\r\n        }\r\n");
            
            #line 220 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n\r\n        #region 拓展功能\r\n");
            
            #line 227 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    if(Functions.ContainsKey(Function.Enable))
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// 启用/禁用\r\n        /// </summary>\r\n");
            
            #line 235 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParamsRemark();
            
            #line default
            #line hidden
            this.Write("        /// <param name=\"enable\">设置状态</param>\r\n        /// <returns></returns>\r\n " +
                    "       [HttpPost(\"enable");
            
            #line 238 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryRouteParams();
            
            #line default
            #line hidden
            this.Write("/{enable}\")]\r\n        public async Task<object> Enable(");
            
            #line 239 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryParams();
            
            #line default
            #line hidden
            this.Write(", bool enable)\r\n        {\r\n            ");
            
            #line 241 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Enable(");
            
            #line 241 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
WritePrimaryMethodParams();
            
            #line default
            #line hidden
            this.Write(", enable);\r\n            return await Task.FromResult(Success());\r\n        }\r\n");
            
            #line 244 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }
    
    if(Functions.ContainsKey(Function.Sort))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 普通排序
        /// </summary>
        /// <param name=""data"">数据</param>
        /// <returns></returns>
        [HttpPost(""sort"")]
        public async Task<object> Sort([FromBody] Sort data)
        {
            ");
            
            #line 259 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write(@"Business.Sort(data);
            return await Task.FromResult(Success());
        }

        /// <summary>
        /// 拖动排序
        /// </summary>
        /// <param name=""data"">数据</param>
        /// <returns></returns>
        [HttpPost(""dragsort"")]
        public async Task<object> DragSort([FromBody] ");
            
            #line 269 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.Tree ? "TreeDragSort" : "DragSort"));
            
            #line default
            #line hidden
            this.Write(" data)\r\n        {\r\n            ");
            
            #line 271 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.DragSort(data);\r\n            return await Task.FromResult(Success());\r\n " +
                    "       }\r\n");
            
            #line 274 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }
    
    if(Functions.ContainsKey(Function.Import))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 下载导入模板
        /// </summary>
        /// <param name=""version"">
        /// <para>指定Excel文件版本</para>
        /// <para><see cref=""ExcelVersion.xls""/>: 2003版本</para>
        /// <para>(默认)<see cref=""ExcelVersion.xlsx""/>: 2007及以上版本</para>
        /// </param>
        /// <param name=""autogenerateTemplate"">
        /// <para>指明要使用的模板类型</para>
        /// <para>(默认)true: 自动生成模板</para>
        /// <para>false: 使用预制模板</para>
        /// </param>
        /// <returns></returns>
        [HttpGet(""downloadtemplate"")]
        public async Task DownloadTemplate(string version = ExcelVersion.xlsx, bool autogenerateTemplate = true)
        {
            await ");
            
            #line 298 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write(@"Business.DownloadTemplate(version, autogenerateTemplate);
        }

        /// <summary>
        /// 导入
        /// </summary>
        /// <param name=""file"">Execl文件</param>
        /// <param name=""autogenerateTemplate"">
        /// <para>指明所使用的模板类型</para>
        /// <para>(默认)true: 自动生成的模板</para>
        /// <para>false: 预制模板</para>
        /// </param>
        /// <returns></returns>
        [HttpPost(""import"")]
        [SwaggerResponse((int)HttpStatusCode.OK, ""导入结果"", typeof(ImportResult))]
        [Consumes(""multipart/form-data"")]
        public async Task<object> Import(IFormFile file, bool autogenerateTemplate = true)
        {
            return await Task.FromResult(ResponseDataFactory.Success(");
            
            #line 316 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Import(file, autogenerateTemplate)));\r\n        }\r\n");
            
            #line 318 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }
    
    if(Functions.ContainsKey(Function.Export))
    {

            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name=""version"">
        /// <para>指定Excel文件版本</para>
        /// <para><see cref=""ExcelVersion.xls""/>: 2003版本</para>
        /// <para>(默认)<see cref=""ExcelVersion.xlsx""/>: 2007及以上版本</para>
        /// </param>
        /// <param name=""paginationJson"">分页参数Json字符串</param>
        /// <returns></returns>
        [HttpGet(""export"")]
        public void Export(string version = ExcelVersion.xlsx, string paginationJson = null)
        {
            ");
            
            #line 338 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Table.ReducedName));
            
            #line default
            #line hidden
            this.Write("Business.Export(version, paginationJson);\r\n        }\r\n");
            
            #line 340 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 348 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    /// <summary>
    /// 主键参数注释
    /// </summary>
    private void WritePrimaryParamsRemark()
    {
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 356 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("        /// <param name=\"");

        
        #line default
        #line hidden
        
        #line 357 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 357 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("\">");

        
        #line default
        #line hidden
        
        #line 357 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));

        
        #line default
        #line hidden
        
        #line 357 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("</param>\r\n");

        
        #line default
        #line hidden
        
        #line 358 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        }
    }

    /// <summary>
    /// 主键参数
    /// </summary>
    private void WritePrimaryParams()
    {
        var i = 0;
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 370 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? ", " : ""));

        
        #line default
        #line hidden
        
        #line 370 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Type));

        
        #line default
        #line hidden
        
        #line 370 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 370 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 370 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

            i++;
        }
    }

    /// <summary>
    /// 主键路由参数
    /// </summary>
    private void WritePrimaryRouteParams()
    {
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 382 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("/{");

        
        #line default
        #line hidden
        
        #line 382 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 382 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("}");

        
        #line default
        #line hidden
        
        #line 382 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        }
    }

    /// <summary>
    /// 主键方法参数
    /// </summary>
    private void WritePrimaryMethodParams()
    {
        var i = 0;
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 394 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? ", " : ""));

        
        #line default
        #line hidden
        
        #line 394 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Name.ToLower()));

        
        #line default
        #line hidden
        
        #line 394 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

            i++;
        }
    }

    /// <summary>
    /// 主键集合参数注释
    /// </summary>
    private void WritePrimaryListParamsRemark()
    {

        
        #line default
        #line hidden
        
        #line 404 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("        /// <param name=\"keys\">[");

        
        #line default
        #line hidden
        
        #line 405 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

        var i = 0;
        foreach (var field in PrimaryKeys)
        {

        
        #line default
        #line hidden
        
        #line 409 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? " + " : ""));

        
        #line default
        #line hidden
        
        #line 409 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.Remark));

        
        #line default
        #line hidden
        
        #line 409 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

            i++;
        }

        
        #line default
        #line hidden
        
        #line 412 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"
this.Write("]</param>\r\n");

        
        #line default
        #line hidden
        
        #line 413 "F:\图锐信息\项目框架学习\GitHub社区项目\Microservice\src\Tools\T4CAGC\Template\Controller.tt"

    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ControllerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
